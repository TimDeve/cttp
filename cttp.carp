(load "deps.carp")
(load "res.carp")

(use Socket)

(deftype HttpVerb
 GET)

(defmodule HttpVerb
 (defn = [a b]
  (match @a
   b true
   _ false)))

(deftype Route [verb HttpVerb path String handler (Fn [] Response)])

(sig not-found-handler (Fn [] Response))
(defn not-found-handler []
  (Res.send (HttpStatus.NotFound)
            @"text/plain"
            @""))

;(sig get-handler-from-routes (Fn [HttpVerb String (Array Route)] (Fn [] Response)))
(defn get-handler-from-routes [verb path routes]
 (match (Array.find
         &(fn [route]
           (and
            (= &verb (Route.verb route))
            (= &path (Route.path route))))
         &routes)
  (Maybe.Just route) @(Route.handler &route)
  (Maybe.Nothing)    not-found-handler))

(defmodule Cttp
 (sig serve (Fn [String Int &(Array Route)] ()))
 (defn serve [ip port routes]
  (Socket.with-server server ip port
    (Socket.while-connection &server client
      (send &client &(let-do [handler (get-handler-from-routes
                                        (HttpVerb.GET)
                                        @"/"
                                        @routes)
                              res (Response.str &(handler))]
                       (println* &res)
                       res))))))

