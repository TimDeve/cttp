(load "deps.carp")

(load "models.carp")
(load "res.carp")

(use Socket)

(defmodule Koi
  (sig not-found-handler (Fn [Request] Response))
  (defn not-found-handler [req]
    (Res.send (HttpStatus.NotFound)
              @"text/html"
              @"<h1>Not Found</h1>"))

  (sig internal-server-error-handler (Fn [Request] Response))
  (defn internal-server-error-handler [req]
    (Res.send (HttpStatus.InternalServerError)
              @"text/html"
              @"<h1>Internal Server Error</h1>"))

  (sig bad-request-handler (Fn [] Response))
  (defn bad-request-handler []
    (Res.send (HttpStatus.BadRequest)
              @"text/plain"
              @"Bad Request"))

  (hidden get-handler-from-routes)
  (private get-handler-from-routes)
  (sig get-handler-from-routes (Fn [(Ref Request) (Array Route)] (Fn [Request] Response)))
  (defn get-handler-from-routes [req routes]
    (let [verb (HttpVerb.parse (Request.verb req))
          path (URI.str (Request.uri req))]
     (match (Array.find
             &(fn [route]
               (and
                (= &verb (Route.verb route))
                (= &path (Route.path route))))
             &routes)
      (Maybe.Just route) @(Route.handler &route)
      (Maybe.Nothing)    not-found-handler)))

  (hidden get-res-from-routes)
  (private get-res-from-routes)
  (sig get-res-from-routes (Fn [String (Array Route)] Response))
  (defn get-res-from-routes [req-str routes]
    (match (Request.parse &req-str)
      (Result.Success req) ((get-handler-from-routes &req routes) req)
      (Result.Error _)     (bad-request-handler)))

  (sig serve (Fn [String Int &(Array Route)] ()))
  (defn serve [ip port routes]
    (Socket.with-server server ip port
      (Socket.while-connection &server client
        (let-do [req (read &client)]
          (println* &req)
          (send &client &(let-do [res (get-res-from-routes req @routes)
                                  res-str (Response.str &res)]
                           (println* &res-str)
                           res-str)))))))

