(load "src/deps.carp")

(load "src/models.carp")
(load "src/res.carp")
(load "src/req.carp")
(load "src/static.carp")

(use Socket)

(defmodule Koi
  (sig not-found (Fn [Req] Res))
  (defn not-found [req]
    (Res.send (HttpStatus.NotFound)
              @"text/html"
              @"<h1>Not Found</h1>"))

  (sig internal-server-error (Fn [Req] Res))
  (defn internal-server-error [req]
    (Res.send (HttpStatus.InternalServerError)
              @"text/html"
              @"<h1>Internal Server Error</h1>"))

  (sig bad-request (Fn [] Res))
  (defn bad-request []
    (Res.send (HttpStatus.BadRequest)
              @"text/plain"
              @"Bad Request"))

  (hidden get-handler-from-routes)
  (private get-handler-from-routes)
  (sig get-handler-from-routes (Fn [(Ref Req) (Array Route)] (Fn [Req] Res)))
  (defn get-handler-from-routes [req routes]
    (let [verb @(Req.verb req)
          path (URI.str (Req.uri req))]
     (match (Array.find
             &(fn [route]
               (and
                (= &verb (Route.verb route))
                (= &path (Route.path route))))
             &routes)
      (Maybe.Just route) @(Route.handler &route)
      (Maybe.Nothing)    not-found)))

  (hidden get-res-from-routes)
  (private get-res-from-routes)
  (sig get-res-from-routes (Fn [String (Array Route)] Res))
  (defn get-res-from-routes [req-str routes]
    (match (Req.parse &req-str)
      (Result.Success req) ((get-handler-from-routes &req routes) req)
      (Result.Error _)     (bad-request)))

  (hidden print-registered-routes)
  (private print-registered-routes)
  (sig print-registered-routes (Fn [&(Array Route)] ()))
  (defn print-registered-routes [routes]
    (do
      (println* "Registered routes:")
      (foreach [route routes]
       (println* route))))

  (sig serve (Fn [(Ref String) Int (Array Route)] ()))
  (defn serve [ip port routes]
    (do
      (print-registered-routes &routes)
      (println* (fmt "Listening on %s:%i" ip port))
      (Socket.with-server server ip port
        (Socket.while-connection &server client
          (let-do [req (read &client)]
            (println* &(fmt "---REQUEST---\n%s" &req))
            (send &client &(let-do [res     (get-res-from-routes req @&routes)
                                    res-str (Res.str &res)]
                             (println* &(fmt "---RESPONSE---\n%s" &res-str))
                             res-str))))))))
