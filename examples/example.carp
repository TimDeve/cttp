(Project.config "title" "koi-example")

(load "git@github.com:TimDeve/hoquet@v0.1.1")
(load "../koi.carp")

(load "todo.carp")

(use Koi)

(def my-name @"Carp")
(def my-age 1337)

(deftype PersonalInfo [age Int name String])

(defn a-form []
 (with Elements
  (form
   {@"action" @"/submit"
    @"method" @"post"}
   [(input {@"name" @"name"
            @"placeholder" @"Name"})
    (br {})
    (input {@"name" @"age"
            @"placeholder" @"Age"})
    (br {})
    (button {} [@"Submit"])])))

(defn html-template [body-content]
 (with Elements
   (html {}
    [(head {}
      [(title {} [@"Hello Carp"])
       (meta {@"charset" @"UTF-8"})
       (link {@"href" @"/static/index.css" @"rel" @"stylesheet"})])
     (body {} body-content)])))

(sig root-handler (Fn [Req] Res))
(defn root-handler [req]
 (with Elements
  (Res.send (HttpStatus.Ok)
            @"text/html"
            (html-template [(p {} [@"Hello "
                                   @&my-name
                                   @", you are "
                                   (Int.str @&my-age)
                                   @" years old."])
                            (hr {})
                            (a {@"href" @"/todos"} [@"Todo app"])
                            (hr {})
                            (a {@"href" @"/dice"} [@"Roll the dice"])
                            (hr {})
                            (p {} [@"Update your info:"])
                            (a-form)
                            (script {@"src" @"/static/index.js"} [@""])]))))

(sig dice-handler (Fn [Req] Res))
(defn dice-handler [req]
 (with Elements
  (Res.send (HttpStatus.Ok)
            @"text/html"
            (html-template [(p {} [@"You rolled a " (str (Int.random-between 1 7))])]))))

(sig update-name-and-age! (Fn [PersonalInfo] ()))
(defn update-name-and-age! [infos]
  (do
   (set! my-name @(PersonalInfo.name &infos))
   (set! my-age @(PersonalInfo.age &infos))))

(sig post-example-handler (Fn [Req] Res))
(defn post-example-handler [req]
  (match (Req.form-into PersonalInfo &req)
    (Result.Success inf) (do
                          (update-name-and-age! inf)
                          (Res.found @"/"))
    (Result.Error e)     (do
                          (Clog.warn e)
                          (bad-request))))

(defn routes []
  [(Route.init (HttpVerb.GET)  @"/"       root-handler)
   (Route.init (HttpVerb.GET)  @"/dice"   dice-handler)
   (Route.init (HttpVerb.POST) @"/submit" post-example-handler)])

(defn main []
  (serve "localhost" 8099 (Array.concat &[(routes) (TodoDomain.routes) (static "examples/static")])))

